// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: Protos/ping.proto

package ping

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PingService_SendMessage_FullMethodName        = "/PingService/SendMessage"
	PingService_ProposeKeyExchange_FullMethodName = "/PingService/ProposeKeyExchange"
	PingService_ReceiveMessages_FullMethodName    = "/PingService/ReceiveMessages"
	PingService_Login_FullMethodName              = "/PingService/Login"
	PingService_Register_FullMethodName           = "/PingService/Register"
	PingService_GetFriends_FullMethodName         = "/PingService/GetFriends"
	PingService_AddFriend_FullMethodName          = "/PingService/AddFriend"
)

// PingServiceClient is the client API for PingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PingServiceClient interface {
	SendMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*ExitCode, error)
	ProposeKeyExchange(ctx context.Context, in *KeyExchangeRequest, opts ...grpc.CallOption) (*ExitCode, error)
	ReceiveMessages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ServerMessage], error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*ExitCode, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*ExitCode, error)
	GetFriends(ctx context.Context, in *FriendListRequest, opts ...grpc.CallOption) (*ServerMessage, error)
	AddFriend(ctx context.Context, in *AddFriendRequest, opts ...grpc.CallOption) (*ExitCode, error)
}

type pingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPingServiceClient(cc grpc.ClientConnInterface) PingServiceClient {
	return &pingServiceClient{cc}
}

func (c *pingServiceClient) SendMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*ExitCode, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExitCode)
	err := c.cc.Invoke(ctx, PingService_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pingServiceClient) ProposeKeyExchange(ctx context.Context, in *KeyExchangeRequest, opts ...grpc.CallOption) (*ExitCode, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExitCode)
	err := c.cc.Invoke(ctx, PingService_ProposeKeyExchange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pingServiceClient) ReceiveMessages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ServerMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PingService_ServiceDesc.Streams[0], PingService_ReceiveMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, ServerMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PingService_ReceiveMessagesClient = grpc.ServerStreamingClient[ServerMessage]

func (c *pingServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*ExitCode, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExitCode)
	err := c.cc.Invoke(ctx, PingService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pingServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*ExitCode, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExitCode)
	err := c.cc.Invoke(ctx, PingService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pingServiceClient) GetFriends(ctx context.Context, in *FriendListRequest, opts ...grpc.CallOption) (*ServerMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServerMessage)
	err := c.cc.Invoke(ctx, PingService_GetFriends_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pingServiceClient) AddFriend(ctx context.Context, in *AddFriendRequest, opts ...grpc.CallOption) (*ExitCode, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExitCode)
	err := c.cc.Invoke(ctx, PingService_AddFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PingServiceServer is the server API for PingService service.
// All implementations must embed UnimplementedPingServiceServer
// for forward compatibility.
type PingServiceServer interface {
	SendMessage(context.Context, *MessageRequest) (*ExitCode, error)
	ProposeKeyExchange(context.Context, *KeyExchangeRequest) (*ExitCode, error)
	ReceiveMessages(*Empty, grpc.ServerStreamingServer[ServerMessage]) error
	Login(context.Context, *LoginRequest) (*ExitCode, error)
	Register(context.Context, *RegisterRequest) (*ExitCode, error)
	GetFriends(context.Context, *FriendListRequest) (*ServerMessage, error)
	AddFriend(context.Context, *AddFriendRequest) (*ExitCode, error)
	mustEmbedUnimplementedPingServiceServer()
}

// UnimplementedPingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPingServiceServer struct{}

func (UnimplementedPingServiceServer) SendMessage(context.Context, *MessageRequest) (*ExitCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedPingServiceServer) ProposeKeyExchange(context.Context, *KeyExchangeRequest) (*ExitCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeKeyExchange not implemented")
}
func (UnimplementedPingServiceServer) ReceiveMessages(*Empty, grpc.ServerStreamingServer[ServerMessage]) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveMessages not implemented")
}
func (UnimplementedPingServiceServer) Login(context.Context, *LoginRequest) (*ExitCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedPingServiceServer) Register(context.Context, *RegisterRequest) (*ExitCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedPingServiceServer) GetFriends(context.Context, *FriendListRequest) (*ServerMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriends not implemented")
}
func (UnimplementedPingServiceServer) AddFriend(context.Context, *AddFriendRequest) (*ExitCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFriend not implemented")
}
func (UnimplementedPingServiceServer) mustEmbedUnimplementedPingServiceServer() {}
func (UnimplementedPingServiceServer) testEmbeddedByValue()                     {}

// UnsafePingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PingServiceServer will
// result in compilation errors.
type UnsafePingServiceServer interface {
	mustEmbedUnimplementedPingServiceServer()
}

func RegisterPingServiceServer(s grpc.ServiceRegistrar, srv PingServiceServer) {
	// If the following call pancis, it indicates UnimplementedPingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PingService_ServiceDesc, srv)
}

func _PingService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PingService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingServiceServer).SendMessage(ctx, req.(*MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PingService_ProposeKeyExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyExchangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingServiceServer).ProposeKeyExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PingService_ProposeKeyExchange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingServiceServer).ProposeKeyExchange(ctx, req.(*KeyExchangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PingService_ReceiveMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PingServiceServer).ReceiveMessages(m, &grpc.GenericServerStream[Empty, ServerMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PingService_ReceiveMessagesServer = grpc.ServerStreamingServer[ServerMessage]

func _PingService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PingService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PingService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PingService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PingService_GetFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingServiceServer).GetFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PingService_GetFriends_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingServiceServer).GetFriends(ctx, req.(*FriendListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PingService_AddFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingServiceServer).AddFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PingService_AddFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingServiceServer).AddFriend(ctx, req.(*AddFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PingService_ServiceDesc is the grpc.ServiceDesc for PingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PingService",
	HandlerType: (*PingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _PingService_SendMessage_Handler,
		},
		{
			MethodName: "ProposeKeyExchange",
			Handler:    _PingService_ProposeKeyExchange_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _PingService_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _PingService_Register_Handler,
		},
		{
			MethodName: "GetFriends",
			Handler:    _PingService_GetFriends_Handler,
		},
		{
			MethodName: "AddFriend",
			Handler:    _PingService_AddFriend_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceiveMessages",
			Handler:       _PingService_ReceiveMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "Protos/ping.proto",
}
